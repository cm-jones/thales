# Define ARG before FROM (proper syntax)
ARG UBUNTU_VERSION=22.04
FROM --platform=linux/amd64 ubuntu:${UBUNTU_VERSION} AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    pkg-config \
    python3 \
    python3-pip \
    libboost-all-dev \
    libpq-dev \
    libyaml-cpp-dev \
    libpqxx-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Conan package manager
RUN pip3 install conan==1.59.0 && \
    conan profile new --detect default && \
    conan profile update settings.compiler.libcxx=libstdc++11 default

# Create working directory
WORKDIR /app

# Copy source code
COPY . .

# Initialize any submodules in third_party
RUN git submodule update --init --recursive

# Clean any existing build artifacts
RUN rm -rf build CMakeCache.txt CMakeFiles

# Create build directory
RUN mkdir -p build

# Use Conan to install dependencies and CMake to build
WORKDIR /app/build
RUN conan install .. --build=missing && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    cmake --build . -j$(nproc)

# Create minimal runtime image
FROM --platform=linux/amd64 ubuntu:${UBUNTU_VERSION}

# Install runtime dependencies (minimal set needed to run the application)
RUN apt-get update && apt-get install -y \
    libboost-container1.74.0 \
    libboost-system1.74.0 \
    libpq5 \
    postgresql-client \
    libyaml-cpp0.7 \
    libpqxx-6.4 \
    && rm -rf /var/lib/apt/lists/*

# Copy compiled binary and config
COPY --from=builder /app/build/bin/thales /usr/local/bin/
COPY config /etc/thales/config/

# Create necessary directories
RUN mkdir -p /usr/local/thales/logs /usr/local/thales/data

# Copy entrypoint script
COPY docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
