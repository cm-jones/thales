# Define ARG before FROM (proper syntax)
ARG UBUNTU_VERSION=22.04
FROM --platform=linux/amd64 ubuntu:${UBUNTU_VERSION} AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    pkg-config \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Install Conan package manager
RUN pip3 install conan==1.59.0 && \
    conan profile new --detect default && \
    conan profile update settings.compiler.libcxx=libstdc++11 default

# Copy source code
WORKDIR /app
COPY . .

# Create .dockerignore file to exclude build artifacts
RUN echo "build/" > .dockerignore && \
    echo "CMakeFiles/" >> .dockerignore && \
    echo "CMakeCache.txt" >> .dockerignore

# Initialize any submodules in third_party
RUN git submodule update --init --recursive

# Add a script to inspect what's in the third_party directory
RUN echo "Contents of the third_party directory:" && \
    ls -la third_party || echo "No third_party directory found"

# Build using Conan with verbose and more debugging output
RUN mkdir -p build && cd build && \
    echo "Installing dependencies with Conan..." && \
    conan install .. --build=missing -v && \
    echo "Running CMake configure..." && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=ON && \
    echo "Running CMake build..." && \
    cmake --build . --verbose -- -j$(nproc) || { \
        echo "ERROR: Build failed, showing CMake logs:" && \
        cat CMakeFiles/CMakeError.log || echo "No CMakeError.log found" && \
        cat CMakeFiles/CMakeOutput.log || echo "No CMakeOutput.log found" && \
        exit 1; \
    }

# Create minimal runtime image
FROM --platform=linux/amd64 ubuntu:${UBUNTU_VERSION}

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libboost-container1.74.0 \
    libpq5 \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copy the compiled application and configs
COPY --from=builder /app/build/bin/thales /usr/local/bin/
COPY config /etc/thales/config/

# Create necessary directories
RUN mkdir -p /usr/local/thales/logs /usr/local/thales/data

# Create entrypoint script
COPY docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]
