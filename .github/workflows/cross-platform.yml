name: Cross-Platform Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 5'  # Run every Friday at 2:00 UTC
  workflow_dispatch:

jobs:
  build-matrix:
    name: Build on ${{ matrix.os }} with ${{ matrix.compiler.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        compiler:
          - { 
              name: 'gcc',
              cc: 'gcc',
              cxx: 'g++',
              version: '12',
              install_macos: 'gcc@12',
              install_ubuntu: 'g++-12'
            }
          - {
              name: 'clang',
              cc: 'clang',
              cxx: 'clang++',
              version: '15',
              install_macos: 'llvm@15',
              install_ubuntu: 'clang-15 libc++-15-dev libc++abi-15-dev'
            }
        exclude:
          - os: windows-latest
            compiler: { name: 'gcc' }
        include:
          - os: windows-latest
            compiler: { name: 'msvc', cc: 'cl', cxx: 'cl' }
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Setup compilers on each OS
      - name: Setup GCC (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.compiler.name == 'gcc'
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.compiler.install_ubuntu }}
          echo "CC=gcc-${{ matrix.compiler.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.compiler.version }}" >> $GITHUB_ENV
      
      - name: Setup Clang (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && matrix.compiler.name == 'clang'
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.compiler.install_ubuntu }}
          echo "CC=clang-${{ matrix.compiler.version }}" >> $GITHUB_ENV
          echo "CXX=clang++-${{ matrix.compiler.version }}" >> $GITHUB_ENV
      
      - name: Setup GCC (macOS)
        if: matrix.os == 'macos-latest' && matrix.compiler.name == 'gcc'
        run: |
          brew install ${{ matrix.compiler.install_macos }}
          echo "CC=gcc-${{ matrix.compiler.version }}" >> $GITHUB_ENV
          echo "CXX=g++-${{ matrix.compiler.version }}" >> $GITHUB_ENV
      
      - name: Setup Clang (macOS)
        if: matrix.os == 'macos-latest' && matrix.compiler.name == 'clang'
        run: |
          brew install ${{ matrix.compiler.install_macos }}
          echo "CC=$(brew --prefix llvm@${{ matrix.compiler.version }})/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm@${{ matrix.compiler.version }})/bin/clang++" >> $GITHUB_ENV
      
      - name: Setup MSVC (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
      
      # Install dependencies on each OS
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential libboost-all-dev
      
      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install cmake boost
      
      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Install vcpkg if not already installed
          if (!(Test-Path -Path "C:\vcpkg")) {
            git clone https://github.com/Microsoft/vcpkg.git "C:\vcpkg"
            cd "C:\vcpkg"
            .\bootstrap-vcpkg.bat
          }
          # Install Boost
          C:\vcpkg\vcpkg.exe install boost:x64-windows
          echo "VCPKG_ROOT=C:\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append
      
      # Configure and build
      - name: Configure CMake (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
      
      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
      
      - name: Build
        run: |
          cd build
          cmake --build . --config Release
      
      - name: Run tests
        run: |
          cd build
          ctest -C Release --output-on-failure
        continue-on-error: true
      
      # Create platform-specific report
      - name: Generate platform report
        run: |
          echo "# Build Report for ${{ matrix.os }} with ${{ matrix.compiler.name }}" > platform-report.md
          echo "" >> platform-report.md
          echo "## Build Environment" >> platform-report.md
          echo "" >> platform-report.md
          echo "- OS: ${{ matrix.os }}" >> platform-report.md
          echo "- Compiler: ${{ matrix.compiler.name }} ${{ matrix.compiler.version }}" >> platform-report.md
          
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            echo "- CC: $CC" >> platform-report.md
            echo "- CXX: $CXX" >> platform-report.md
            $CC --version >> compiler-version.txt
            echo '```' >> platform-report.md
            cat compiler-version.txt >> platform-report.md
            echo '```' >> platform-report.md
          else
            echo "- Compiler: MSVC" >> platform-report.md
          fi
          
          echo "" >> platform-report.md
          echo "## Build Status" >> platform-report.md
          
          if [ -d "build" ]; then
            echo "- Build directory exists and was created successfully." >> platform-report.md
            
            if [ "${{ matrix.os }}" != "windows-latest" ]; then
              if [ -f "build/thales" ]; then
                echo "- Executable was built successfully." >> platform-report.md
              else
                echo "- Executable was not found." >> platform-report.md
              fi
            else
              if [ -f "build/Release/thales.exe" ]; then
                echo "- Executable was built successfully." >> platform-report.md
              else
                echo "- Executable was not found." >> platform-report.md
              fi
            fi
          else
            echo "- Build directory does not exist." >> platform-report.md
          fi
          
          cat platform-report.md
        shell: bash
      
      - name: Upload platform report
        uses: actions/upload-artifact@v4
        with:
          name: platform-report-${{ matrix.os }}-${{ matrix.compiler.name }}
          path: platform-report.md
          if-no-files-found: warn
      
      # Upload build artifacts
      - name: Upload build artifacts (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: thales-${{ matrix.os }}-${{ matrix.compiler.name }}
          path: build/thales
          if-no-files-found: warn
      
      - name: Upload build artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: thales-${{ matrix.os }}-${{ matrix.compiler.name }}
          path: build/Release/thales.exe
          if-no-files-found: warn

  build-summary:
    name: Cross-Platform Build Summary
    needs: build-matrix
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all platform reports
        uses: actions/download-artifact@v3
        with:
          path: reports
      
      - name: Generate summary report
        run: |
          echo "# Cross-Platform Build Summary" > summary-report.md
          echo "" >> summary-report.md
          echo "| Platform | Compiler | Status |" >> summary-report.md
          echo "|----------|----------|--------|" >> summary-report.md
          
          for report_dir in reports/platform-report-*; do
            if [ -d "$report_dir" ]; then
              platform_compiler=$(basename "$report_dir" | sed 's/platform-report-//g')
              platform=$(echo "$platform_compiler" | cut -d'-' -f1)
              compiler=$(echo "$platform_compiler" | cut -d'-' -f2)
              
              if grep -q "Executable was built successfully" "$report_dir/platform-report.md"; then
                echo "| $platform | $compiler | ✅ Success |" >> summary-report.md
              else
                echo "| $platform | $compiler | ❌ Failed |" >> summary-report.md
              fi
            fi
          done
          
          echo "" >> summary-report.md
          echo "See individual platform reports for details." >> summary-report.md
          
          cat summary-report.md
      
      - name: Upload summary report
        uses: actions/upload-artifact@v4
        with:
          name: cross-platform-build-summary
          path: summary-report.md
