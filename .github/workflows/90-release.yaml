name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without "v" prefix e.g. 1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-${{ vars.UBUNTU_VERSION }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper changelog generation
    
    - name: Get version from tag or input
      id: get_version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version: $VERSION"
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          # If no previous tag, use the first commit
          echo "No previous tag found, using all commits"
          git log --pretty=format:"* %s (%h)" > CHANGELOG.txt
        else
          echo "Previous tag: $PREV_TAG"
          git log --pretty=format:"* %s (%h)" ${PREV_TAG}..HEAD > CHANGELOG.txt
        fi
        
        # Extract content from CHANGELOG.md if it exists
        if [ -f "CHANGELOG.md" ]; then
          echo "Found CHANGELOG.md, extracting relevant section"
          VERSION=${{ steps.get_version.outputs.version }}
          
          # Extract the section for the current version from CHANGELOG.md if it exists
          awk "/## \[${VERSION}\]/ {flag=1; next} /## \[.*\]/ {flag=0} flag" CHANGELOG.md >> CHANGELOG.txt
        fi
        
        # Ensure there's at least some content
        if [ ! -s CHANGELOG.txt ]; then
          echo "* No significant changes in this release" > CHANGELOG.txt
        fi
        
        cat CHANGELOG.txt
        
        # Escape special characters for GitHub Actions
        CHANGELOG=$(cat CHANGELOG.txt)
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
        echo "content<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: Release v${{ steps.get_version.outputs.version }}
        body: ${{ steps.changelog.outputs.content }}
        draft: false
        prerelease: false

  build-linux:
    needs: create-release
    runs-on: ubuntu-${{ vars.UBUNTU_VERSION }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential cmake libboost-all-dev
    
    - name: Configure
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
    
    - name: Package
      run: |
        mkdir -p package/thales-${{ needs.create-release.outputs.version }}-linux
        cp build/thales package/thales-${{ needs.create-release.outputs.version }}-linux/
        cp -r config package/thales-${{ needs.create-release.outputs.version }}-linux/
        cp LICENSE README.md CHANGELOG.md package/thales-${{ needs.create-release.outputs.version }}-linux/
        cd package
        tar -czvf thales-${{ needs.create-release.outputs.version }}-linux.tar.gz thales-${{ needs.create-release.outputs.version }}-linux
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./package/thales-${{ needs.create-release.outputs.version }}-linux.tar.gz
        asset_name: thales-${{ needs.create-release.outputs.version }}-linux.tar.gz
        asset_content_type: application/gzip

  build-macos:
    needs: create-release
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: |
        brew update
        brew install cmake boost
    
    - name: Configure
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
    
    - name: Build
      run: |
        cd build
        cmake --build . --config Release
    
    - name: Package
      run: |
        mkdir -p package/thales-${{ needs.create-release.outputs.version }}-macos
        cp build/thales package/thales-${{ needs.create-release.outputs.version }}-macos/
        cp -r config package/thales-${{ needs.create-release.outputs.version }}-macos/
        cp LICENSE README.md CHANGELOG.md package/thales-${{ needs.create-release.outputs.version }}-macos/
        cd package
        tar -czvf thales-${{ needs.create-release.outputs.version }}-macos.tar.gz thales-${{ needs.create-release.outputs.version }}-macos
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./package/thales-${{ needs.create-release.outputs.version }}-macos.tar.gz
        asset_name: thales-${{ needs.create-release.outputs.version }}-macos.tar.gz
        asset_content_type: application/gzip

  build-docker:
    needs: create-release
    runs-on: ubuntu-${{ vars.UBUNTU_VERSION }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: |
          yourusername/thales:latest
          yourusername/thales:${{ needs.create-release.outputs.version }}
    
    - name: Update GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.create-release.outputs.version }}
        body: |
          Docker image published:
          ```
          docker pull yourusername/thales:${{ needs.create-release.outputs.version }}
          ```
        token: ${{ secrets.GITHUB_TOKEN }}
        append_body: true
