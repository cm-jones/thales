name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libboost-all-dev
    
    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install cmake boost
    
    - name: Configure and build
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh --type ${{ matrix.build_type }} --clean --test
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: thales-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/thales
          build/thales.exe
        if-no-files-found: ignore

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper coverage reporting
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libboost-all-dev lcov
    
    - name: Configure with coverage
      run: |
        mkdir -p build
        cd build
        cmake -DENABLE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug ..
    
    - name: Build
      run: |
        cd build
        make
    
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
    
    - name: Generate coverage report
      run: |
        cd build
        lcov --directory . --capture --output-file coverage.info
        # Show coverage file details for debugging
        ls -la coverage.info
        echo "Coverage file size: $(du -h coverage.info | cut -f1)"
        
        # Remove system headers from coverage report
        lcov --remove coverage.info '/usr/*' '/opt/*' '*/third_party/*' '*/tests/*' --output-file filtered_coverage.info
        # Show filtered coverage file details
        ls -la filtered_coverage.info
        echo "Filtered coverage file size: $(du -h filtered_coverage.info | cut -f1)"
        
        # Generate HTML report for artifact upload
        mkdir -p coverage_report
        genhtml filtered_coverage.info --output-directory coverage_report
    
    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: build/coverage_report
        if-no-files-found: error
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./build/filtered_coverage.info
        fail_ci_if_error: false
        verbose: true
