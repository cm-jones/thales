#ifndef THALES_STRATEGIES_STRATEGY_BASE_H
#define THALES_STRATEGIES_STRATEGY_BASE_H

#include <memory>
#include <string>
#include <vector>
#include <thales/utils/config.h>
#include <thales/data/market_data.h>
#include <thales/core/portfolio.h>

namespace thales {
namespace strategies {

/**
 * @struct Signal
 * @brief Represents a trading signal generated by a strategy.
 */
struct Signal {
    enum class Type {
        BUY,
        SELL,
        HOLD
    };
    
    std::string symbol;       // Symbol of the instrument
    Type type;                // Signal type
    double strength;          // Signal strength (0.0 to 1.0)
    double targetPrice;       // Target price
    double stopLoss;          // Stop loss price
    std::string timestamp;    // Timestamp when the signal was generated
    std::string strategyName; // Name of the strategy that generated the signal
    
    // Constructor
    Signal(
        const std::string& sym = "",
        Type t = Type::HOLD,
        double str = 0.0,
        double target = 0.0,
        double stop = 0.0,
        const std::string& ts = "",
        const std::string& strat = ""
    ) : symbol(sym),
        type(t),
        strength(str),
        targetPrice(target),
        stopLoss(stop),
        timestamp(ts),
        strategyName(strat) {}
};

/**
 * @class StrategyBase
 * @brief Base class for trading strategies.
 * 
 * This class defines the interface for trading strategies and provides
 * common functionality.
 */
class StrategyBase {
public:
    /**
     * @brief Constructor
     * @param name The name of the strategy
     * @param config The configuration for the strategy
     */
    StrategyBase(const std::string& name, const utils::Config& config);
    
    /**
     * @brief Virtual destructor
     */
    virtual ~StrategyBase() = default;
    
    /**
     * @brief Initialize the strategy
     * @return true if initialization was successful, false otherwise
     */
    virtual bool initialize() = 0;
    
    /**
     * @brief Execute the strategy
     * @param marketData The market data to use for execution
     * @param portfolio The current portfolio
     * @return A vector of signals generated by the strategy
     */
    virtual std::vector<Signal> execute(
        const std::vector<data::MarketData>& marketData,
        const core::Portfolio& portfolio
    ) = 0;
    
    /**
     * @brief Get the name of the strategy
     * @return The name of the strategy
     */
    std::string getName() const;
    
    /**
     * @brief Get the description of the strategy
     * @return The description of the strategy
     */
    std::string getDescription() const;
    
    /**
     * @brief Set the description of the strategy
     * @param description The description to set
     */
    void setDescription(const std::string& description);
    
    /**
     * @brief Get the configuration of the strategy
     * @return The configuration of the strategy
     */
    const utils::Config& getConfig() const;
    
    /**
     * @brief Set a configuration value
     * @param key The configuration key
     * @param value The value to set
     */
    void setConfigValue(const std::string& key, const utils::Config::ConfigValue& value);
    
    /**
     * @brief Get the symbols that the strategy is interested in
     * @return A vector of symbols
     */
    virtual std::vector<std::string> getSymbols() const = 0;

protected:
    // Strategy name and description
    std::string name_;
    std::string description_;
    
    // Configuration
    utils::Config config_;
    
    // Symbols to trade
    std::vector<std::string> symbols_;
    
    // Protected methods
    virtual void validateConfig();
    virtual void loadSymbols();
};

} // namespace strategies
} // namespace thales

#endif // THALES_STRATEGIES_STRATEGY_BASE_H
